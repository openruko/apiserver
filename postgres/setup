#!/bin/bash

echo "Note: Must run from postgres/ directory"
echo "Shame: This script needs some serious TLC"
echo "Initial setup for a clean openruko database"
set -e
set -o pipefail

echo -en "\nDatabase name: "
read dbName

apiSchema="openruko_api"
dataSchema="openruko_data"

if [ "$1" != "--functions-only" ]; then

  echo -n "Your name: "
  read oruser_name
  echo -n "Your email: "
  read oruser_email
  echo -n "Desired password: "
  read -s oruser_password
  # echo -en "Database username [openruko]: "
  # read dbUser
  # echo -en "Database password [password]: "
  # read dbPassword
  # 
  # dbPassword=${dbPassword:-openruko}

  # horrible, yucky

  (psql --list | grep "^ $dbName ") || psql postgres -c "CREATE DATABASE $dbName;" > /dev/null

  # if [ -n "$dbUser" -a -n "$dbPassword" ]; then
  #   psql postgres -c "CREATE USER $dbUser WITH PASSWORD '$dbPassword'"
  #   psql postgres -c "GRANT ALL PRIVILEGES ON DATABASE $dbName to $dbUser;"
  #    add schema grant
  # fi

  superUserKey=$(uuidgen)

  if [ -f ~/.ssh/id_rsa.pub ]; then
    pubFile=~/.ssh/id_rsa.pub
  else
    echo -n "Enter location of your public key file []:"
    read pubFile
  fi

  if [ -f "$pubFile" ]; then
    yourPubFingerprint=$(ssh-keygen -l -f "$pubFile" | cut -d' ' -f2 | tr -d ':')
  fi

  echo "Using your public key fingerprint: $yourPubFingerprint"


  extensions=('plpgsql pgcrypto hstore')

  for extension in $extensions; do
    echo "Enabling extension $extension:"
    psql "$dbName" -c "CREATE EXTENSION IF NOT EXISTS $extension"
  done;

fi

if [ "$1" != "--functions-only" ]; then

  files=($dataSchema/functions/*.pgsql $dataSchema/tables/*.pgsql)

  psql "$dbName" -c "DROP SCHEMA IF EXISTS $dataSchema CASCADE; CREATE SCHEMA $dataSchema"

  setup=$(cat <<SETUP
SET search_path TO $dataSchema, public;
SETUP
)

  for file in "${files[@]}"; do
    echo "Loading $file"
    echo "$setup" | cat - $file | psql -v ON_ERROR_STOP=1 "$dbName"
  done;

fi

files=($apiSchema/views/*.pgsql $apiSchema/functions/*.pgsql)

psql $dbName -c "DROP SCHEMA IF EXISTS $apiSchema CASCADE; CREATE SCHEMA $apiSchema"

setup=$(cat <<SETUP
SET search_path TO $apiSchema, $dataSchema, public;
SETUP
)

for file in "${files[@]}"; do
  echo "Loading $file"
  echo "$setup" | cat - $file | psql -v ON_ERROR_STOP=1 "$dbName"
done;

if [ "$1" != "--functions-only" ]; then

  psql "$dbName" -o /dev/null -nq -c "SET search_path TO openruko_data,public; SELECT * FROM openruko_api.add_user('$oruser_email','$oruser_name','$oruser_password')"
  psql "$dbName" -o /dev/null -nq -c "SET search_path TO openruko_data,public; SELECT * FROM openruko_api.add_user('admin@dev.null','superuser','superuser', true, '$superUserKey')"
  if [ -n "$pubFile" ]; then
    psql "$dbName" -o /dev/null -nq -c "SET search_path TO openruko_data,public; SELECT * FROM openruko_api.add_key(1,'ssh-rsa','aaabbb','test','$yourPubFingerprint')"
  fi
  psql "$dbName" -o /dev/null -nq -c "SET search_path TO openruko_data,public; SELECT * FROM openruko_api.add_app(1, 'testing', 'cedar')"
  echo "API Super key is: $superUserKey"
  echo "^^ (set this in gitmouth and dyno hosts' env vars - see README.md)"

fi

echo "Database $dbName setup complete"
